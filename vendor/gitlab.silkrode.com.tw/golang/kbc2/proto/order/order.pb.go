// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order/order.proto

package order

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WalletStatus int32

const (
	WalletStatus_before               WalletStatus = 0
	WalletStatus_confirm              WalletStatus = 1
	WalletStatus_failed               WalletStatus = 2
	WalletStatus_unknow_wallet_status WalletStatus = 3
)

var WalletStatus_name = map[int32]string{
	0: "before",
	1: "confirm",
	2: "failed",
	3: "unknow_wallet_status",
}

var WalletStatus_value = map[string]int32{
	"before":               0,
	"confirm":              1,
	"failed":               2,
	"unknow_wallet_status": 3,
}

func (x WalletStatus) String() string {
	return proto.EnumName(WalletStatus_name, int32(x))
}

func (WalletStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fa47a2077d8980ed, []int{0}
}

type TransactionType int32

const (
	TransactionType_Deposit                TransactionType = 0
	TransactionType_Withdrawal             TransactionType = 1
	TransactionType_UNKNOW_TRANSACTIONTYPE TransactionType = 2
)

var TransactionType_name = map[int32]string{
	0: "Deposit",
	1: "Withdrawal",
	2: "UNKNOW_TRANSACTIONTYPE",
}

var TransactionType_value = map[string]int32{
	"Deposit":                0,
	"Withdrawal":             1,
	"UNKNOW_TRANSACTIONTYPE": 2,
}

func (x TransactionType) String() string {
	return proto.EnumName(TransactionType_name, int32(x))
}

func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fa47a2077d8980ed, []int{1}
}

type PaymentType int32

const (
	PaymentType_ALIPAY             PaymentType = 0
	PaymentType_WECHAT             PaymentType = 1
	PaymentType_BANKCARD           PaymentType = 2
	PaymentType_UNKNOW_PAYMENTTYPE PaymentType = 3
)

var PaymentType_name = map[int32]string{
	0: "ALIPAY",
	1: "WECHAT",
	2: "BANKCARD",
	3: "UNKNOW_PAYMENTTYPE",
}

var PaymentType_value = map[string]int32{
	"ALIPAY":             0,
	"WECHAT":             1,
	"BANKCARD":           2,
	"UNKNOW_PAYMENTTYPE": 3,
}

func (x PaymentType) String() string {
	return proto.EnumName(PaymentType_name, int32(x))
}

func (PaymentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fa47a2077d8980ed, []int{2}
}

type Status int32

const (
	// ToBeConfirmed 待確認
	Status_TBC Status = 0
	// Processing 處理中
	Status_PROCESSING Status = 1
	// Paused 風控暫停
	Status_PAUSED Status = 2
	// Succeed 交易成功
	Status_SUCCEED Status = 3
	// Failed 交易失敗
	Status_FAILED        Status = 4
	Status_UNKNOW_STATUS Status = 5
)

var Status_name = map[int32]string{
	0: "TBC",
	1: "PROCESSING",
	2: "PAUSED",
	3: "SUCCEED",
	4: "FAILED",
	5: "UNKNOW_STATUS",
}

var Status_value = map[string]int32{
	"TBC":           0,
	"PROCESSING":    1,
	"PAUSED":        2,
	"SUCCEED":       3,
	"FAILED":        4,
	"UNKNOW_STATUS": 5,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fa47a2077d8980ed, []int{3}
}

type MerchantRateType int32

const (
	// 訂單費率比例
	MerchantRateType_ratio MerchantRateType = 0
	// 訂單費率固定
	MerchantRateType_fixed                    MerchantRateType = 1
	MerchantRateType_unknow_merchant_rateType MerchantRateType = 2
)

var MerchantRateType_name = map[int32]string{
	0: "ratio",
	1: "fixed",
	2: "unknow_merchant_rateType",
}

var MerchantRateType_value = map[string]int32{
	"ratio":                    0,
	"fixed":                    1,
	"unknow_merchant_rateType": 2,
}

func (x MerchantRateType) String() string {
	return proto.EnumName(MerchantRateType_name, int32(x))
}

func (MerchantRateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fa47a2077d8980ed, []int{4}
}

type MerchantResult int32

const (
	// 交易成功
	MerchantResult_MerchantResultSucceed MerchantResult = 0
	// 交易失敗
	MerchantResult_MerchantResultFailed MerchantResult = 1
	MerchantResult_UnknowMerchantResult MerchantResult = 2
)

var MerchantResult_name = map[int32]string{
	0: "MerchantResultSucceed",
	1: "MerchantResultFailed",
	2: "UnknowMerchantResult",
}

var MerchantResult_value = map[string]int32{
	"MerchantResultSucceed": 0,
	"MerchantResultFailed":  1,
	"UnknowMerchantResult":  2,
}

func (x MerchantResult) String() string {
	return proto.EnumName(MerchantResult_name, int32(x))
}

func (MerchantResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fa47a2077d8980ed, []int{5}
}

type MainOrder struct {
	// 訂單編號
	TrackingNumber string `protobuf:"bytes,1,opt,name=TrackingNumber,proto3" json:"TrackingNumber,omitempty"`
	// 錢包預扣狀態
	WalletStatus WalletStatus `protobuf:"varint,2,opt,name=WalletStatus,proto3,enum=order.WalletStatus" json:"WalletStatus,omitempty"`
	// 交易方式
	TransactionType TransactionType `protobuf:"varint,3,opt,name=TransactionType,proto3,enum=order.TransactionType" json:"TransactionType,omitempty"`
	// 支付流水號
	PaymentNumber string `protobuf:"bytes,4,opt,name=PaymentNumber,proto3" json:"PaymentNumber,omitempty"`
	// 訂單類型 e.g.微信/支付寶/銀行卡
	PaymentType PaymentType `protobuf:"varint,5,opt,name=PaymentType,proto3,enum=order.PaymentType" json:"PaymentType,omitempty"`
	// 打款帳戶
	DepositAccount string `protobuf:"bytes,6,opt,name=DepositAccount,proto3" json:"DepositAccount,omitempty"`
	// 收款帳戶
	WithdrawAccount string `protobuf:"bytes,7,opt,name=WithdrawAccount,proto3" json:"WithdrawAccount,omitempty"`
	// 訂單狀態
	Status Status `protobuf:"varint,8,opt,name=Status,proto3,enum=order.Status" json:"Status,omitempty"`
	// 玩家ID (KM)
	PlayerID string `protobuf:"bytes,9,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	// 玩家姓名 (記錄用)
	UserName string `protobuf:"bytes,10,opt,name=UserName,proto3" json:"UserName,omitempty"`
	// 設備ID (記錄用)
	DeviceID string `protobuf:"bytes,11,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	// 設備IP (記錄用)
	DeviceIP string `protobuf:"bytes,12,opt,name=DeviceIP,proto3" json:"DeviceIP,omitempty"`
	// 設備類型 (記錄用)
	DeviceType string `protobuf:"bytes,13,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
	// 電話號碼 (記錄用)
	Telephone string `protobuf:"bytes,14,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	// 預計交易金額
	EstimatedCost float64 `protobuf:"fixed64,15,opt,name=EstimatedCost,proto3" json:"EstimatedCost,omitempty"`
	// 實際交易金額
	ActualCost  float64 `protobuf:"fixed64,16,opt,name=ActualCost,proto3" json:"ActualCost,omitempty"`
	CompletedAt uint64  `protobuf:"varint,17,opt,name=CompletedAt,proto3" json:"CompletedAt,omitempty"`
	DeletedAt   uint64  `protobuf:"varint,18,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
	ExpiredAt   uint64  `protobuf:"varint,19,opt,name=ExpiredAt,proto3" json:"ExpiredAt,omitempty"`
	// -----customer 商戶-----
	// 商戶ID
	MerchantID uint64 `protobuf:"varint,20,opt,name=MerchantID,proto3" json:"MerchantID,omitempty"`
	// 商戶姓名
	MerchantName string `protobuf:"bytes,21,opt,name=MerchantName,proto3" json:"MerchantName,omitempty"`
	// 商戶訂單編號
	MerchantOrderNumber string `protobuf:"bytes,22,opt,name=MerchantOrderNumber,proto3" json:"MerchantOrderNumber,omitempty"`
	// 商戶手續費
	MerchantFee float64 `protobuf:"fixed64,23,opt,name=MerchantFee,proto3" json:"MerchantFee,omitempty"`
	// 商戶費率選項 0: 未設定 1: 比率 2: 固定費率
	MerchantRateType MerchantRateType `protobuf:"varint,24,opt,name=MerchantRateType,proto3,enum=order.MerchantRateType" json:"MerchantRateType,omitempty"`
	// 商戶費率比率 (KM)
	MerchantRate float64 `protobuf:"fixed64,25,opt,name=MerchantRate,proto3" json:"MerchantRate,omitempty"`
	// 商戶費率固定 (KM)
	MerchantRateFixed float64 `protobuf:"fixed64,26,opt,name=MerchantRateFixed,proto3" json:"MerchantRateFixed,omitempty"`
	// 商戶回調結果
	MerchantResult MerchantResult `protobuf:"varint,27,opt,name=MerchantResult,proto3,enum=order.MerchantResult" json:"MerchantResult,omitempty"`
	// 商戶回調網址
	MerchantNotifyURL string `protobuf:"bytes,28,opt,name=MerchantNotifyURL,proto3" json:"MerchantNotifyURL,omitempty"`
	// -----商戶項目-----
	// 商戶項目ID
	MerchantProjectID uint64 `protobuf:"varint,29,opt,name=MerchantProjectID,proto3" json:"MerchantProjectID,omitempty"`
	// 商戶項目名稱
	MerchantProjectName string `protobuf:"bytes,30,opt,name=MerchantProjectName,proto3" json:"MerchantProjectName,omitempty"`
	// -----商戶產品-----
	// 產品ID
	MerchantProductID uint64 `protobuf:"varint,31,opt,name=MerchantProductID,proto3" json:"MerchantProductID,omitempty"`
	// 產品名稱
	MerchantProductName string `protobuf:"bytes,32,opt,name=MerchantProductName,proto3" json:"MerchantProductName,omitempty"`
	// -----商戶接口-----
	// 商戶接口ID
	MerchantProductAPIID uint64 `protobuf:"varint,33,opt,name=MerchantProductAPIID,proto3" json:"MerchantProductAPIID,omitempty"`
	// 商戶接口名稱
	MerchantProductAPIName string `protobuf:"bytes,34,opt,name=MerchantProductAPIName,proto3" json:"MerchantProductAPIName,omitempty"`
	// -----3rd party 支付渠道-----
	// 3rd party 支付渠道
	ChannelID uint64 `protobuf:"varint,35,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	// 渠道code
	ChannelCode string `protobuf:"bytes,36,opt,name=ChannelCode,proto3" json:"ChannelCode,omitempty"`
	// 渠道名稱
	ChannelName string `protobuf:"bytes,37,opt,name=ChannelName,proto3" json:"ChannelName,omitempty"`
	// 渠道建單參數
	ChannelReq []byte `protobuf:"bytes,38,opt,name=ChannelReq,proto3" json:"ChannelReq,omitempty"`
	// 渠道訂單編號
	ChannelOrderNumber string `protobuf:"bytes,39,opt,name=ChannelOrderNumber,proto3" json:"ChannelOrderNumber,omitempty"`
	// 商戶原始
	ChannelMerchantID string `protobuf:"bytes,40,opt,name=ChannelMerchantID,proto3" json:"ChannelMerchantID,omitempty"`
	// -----風控暫停-----
	// 風控未通過原因
	BBReason []byte `protobuf:"bytes,41,opt,name=BBReason,proto3" json:"BBReason,omitempty"`
	// 風控要跳過步驟
	BBSkip               []byte   `protobuf:"bytes,42,opt,name=BBSkip,proto3" json:"BBSkip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MainOrder) Reset()         { *m = MainOrder{} }
func (m *MainOrder) String() string { return proto.CompactTextString(m) }
func (*MainOrder) ProtoMessage()    {}
func (*MainOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa47a2077d8980ed, []int{0}
}

func (m *MainOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MainOrder.Unmarshal(m, b)
}
func (m *MainOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MainOrder.Marshal(b, m, deterministic)
}
func (m *MainOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainOrder.Merge(m, src)
}
func (m *MainOrder) XXX_Size() int {
	return xxx_messageInfo_MainOrder.Size(m)
}
func (m *MainOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MainOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MainOrder proto.InternalMessageInfo

func (m *MainOrder) GetTrackingNumber() string {
	if m != nil {
		return m.TrackingNumber
	}
	return ""
}

func (m *MainOrder) GetWalletStatus() WalletStatus {
	if m != nil {
		return m.WalletStatus
	}
	return WalletStatus_before
}

func (m *MainOrder) GetTransactionType() TransactionType {
	if m != nil {
		return m.TransactionType
	}
	return TransactionType_Deposit
}

func (m *MainOrder) GetPaymentNumber() string {
	if m != nil {
		return m.PaymentNumber
	}
	return ""
}

func (m *MainOrder) GetPaymentType() PaymentType {
	if m != nil {
		return m.PaymentType
	}
	return PaymentType_ALIPAY
}

func (m *MainOrder) GetDepositAccount() string {
	if m != nil {
		return m.DepositAccount
	}
	return ""
}

func (m *MainOrder) GetWithdrawAccount() string {
	if m != nil {
		return m.WithdrawAccount
	}
	return ""
}

func (m *MainOrder) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_TBC
}

func (m *MainOrder) GetPlayerID() string {
	if m != nil {
		return m.PlayerID
	}
	return ""
}

func (m *MainOrder) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *MainOrder) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *MainOrder) GetDeviceIP() string {
	if m != nil {
		return m.DeviceIP
	}
	return ""
}

func (m *MainOrder) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *MainOrder) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *MainOrder) GetEstimatedCost() float64 {
	if m != nil {
		return m.EstimatedCost
	}
	return 0
}

func (m *MainOrder) GetActualCost() float64 {
	if m != nil {
		return m.ActualCost
	}
	return 0
}

func (m *MainOrder) GetCompletedAt() uint64 {
	if m != nil {
		return m.CompletedAt
	}
	return 0
}

func (m *MainOrder) GetDeletedAt() uint64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func (m *MainOrder) GetExpiredAt() uint64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

func (m *MainOrder) GetMerchantID() uint64 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *MainOrder) GetMerchantName() string {
	if m != nil {
		return m.MerchantName
	}
	return ""
}

func (m *MainOrder) GetMerchantOrderNumber() string {
	if m != nil {
		return m.MerchantOrderNumber
	}
	return ""
}

func (m *MainOrder) GetMerchantFee() float64 {
	if m != nil {
		return m.MerchantFee
	}
	return 0
}

func (m *MainOrder) GetMerchantRateType() MerchantRateType {
	if m != nil {
		return m.MerchantRateType
	}
	return MerchantRateType_ratio
}

func (m *MainOrder) GetMerchantRate() float64 {
	if m != nil {
		return m.MerchantRate
	}
	return 0
}

func (m *MainOrder) GetMerchantRateFixed() float64 {
	if m != nil {
		return m.MerchantRateFixed
	}
	return 0
}

func (m *MainOrder) GetMerchantResult() MerchantResult {
	if m != nil {
		return m.MerchantResult
	}
	return MerchantResult_MerchantResultSucceed
}

func (m *MainOrder) GetMerchantNotifyURL() string {
	if m != nil {
		return m.MerchantNotifyURL
	}
	return ""
}

func (m *MainOrder) GetMerchantProjectID() uint64 {
	if m != nil {
		return m.MerchantProjectID
	}
	return 0
}

func (m *MainOrder) GetMerchantProjectName() string {
	if m != nil {
		return m.MerchantProjectName
	}
	return ""
}

func (m *MainOrder) GetMerchantProductID() uint64 {
	if m != nil {
		return m.MerchantProductID
	}
	return 0
}

func (m *MainOrder) GetMerchantProductName() string {
	if m != nil {
		return m.MerchantProductName
	}
	return ""
}

func (m *MainOrder) GetMerchantProductAPIID() uint64 {
	if m != nil {
		return m.MerchantProductAPIID
	}
	return 0
}

func (m *MainOrder) GetMerchantProductAPIName() string {
	if m != nil {
		return m.MerchantProductAPIName
	}
	return ""
}

func (m *MainOrder) GetChannelID() uint64 {
	if m != nil {
		return m.ChannelID
	}
	return 0
}

func (m *MainOrder) GetChannelCode() string {
	if m != nil {
		return m.ChannelCode
	}
	return ""
}

func (m *MainOrder) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *MainOrder) GetChannelReq() []byte {
	if m != nil {
		return m.ChannelReq
	}
	return nil
}

func (m *MainOrder) GetChannelOrderNumber() string {
	if m != nil {
		return m.ChannelOrderNumber
	}
	return ""
}

func (m *MainOrder) GetChannelMerchantID() string {
	if m != nil {
		return m.ChannelMerchantID
	}
	return ""
}

func (m *MainOrder) GetBBReason() []byte {
	if m != nil {
		return m.BBReason
	}
	return nil
}

func (m *MainOrder) GetBBSkip() []byte {
	if m != nil {
		return m.BBSkip
	}
	return nil
}

type SubOrder struct {
	// 訂單編號
	TrackingNumber string `protobuf:"bytes,1,opt,name=TrackingNumber,proto3" json:"TrackingNumber,omitempty"`
	// 子訂單編號
	SubTrackingNumber string `protobuf:"bytes,2,opt,name=SubTrackingNumber,proto3" json:"SubTrackingNumber,omitempty"`
	// 渠道ID
	ChannelID string `protobuf:"bytes,3,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	// 渠道名稱
	ChannelName string `protobuf:"bytes,4,opt,name=ChannelName,proto3" json:"ChannelName,omitempty"`
	// 商戶接口名稱
	MerchantProductAPIName string `protobuf:"bytes,5,opt,name=MerchantProductAPIName,proto3" json:"MerchantProductAPIName,omitempty"`
	// 建立結果 e.g 成功 / 失敗
	IsSuccess bool `protobuf:"varint,6,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
	// 錯誤訊息
	ResponseMessage string `protobuf:"bytes,7,opt,name=ResponseMessage,proto3" json:"ResponseMessage,omitempty"`
	// 渠道建單參數
	ChannelReq string `protobuf:"bytes,8,opt,name=ChannelReq,proto3" json:"ChannelReq,omitempty"`
	// 渠道回應結果
	ChannelResp          string   `protobuf:"bytes,9,opt,name=ChannelResp,proto3" json:"ChannelResp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubOrder) Reset()         { *m = SubOrder{} }
func (m *SubOrder) String() string { return proto.CompactTextString(m) }
func (*SubOrder) ProtoMessage()    {}
func (*SubOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa47a2077d8980ed, []int{1}
}

func (m *SubOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubOrder.Unmarshal(m, b)
}
func (m *SubOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubOrder.Marshal(b, m, deterministic)
}
func (m *SubOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubOrder.Merge(m, src)
}
func (m *SubOrder) XXX_Size() int {
	return xxx_messageInfo_SubOrder.Size(m)
}
func (m *SubOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SubOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SubOrder proto.InternalMessageInfo

func (m *SubOrder) GetTrackingNumber() string {
	if m != nil {
		return m.TrackingNumber
	}
	return ""
}

func (m *SubOrder) GetSubTrackingNumber() string {
	if m != nil {
		return m.SubTrackingNumber
	}
	return ""
}

func (m *SubOrder) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *SubOrder) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *SubOrder) GetMerchantProductAPIName() string {
	if m != nil {
		return m.MerchantProductAPIName
	}
	return ""
}

func (m *SubOrder) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *SubOrder) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *SubOrder) GetChannelReq() string {
	if m != nil {
		return m.ChannelReq
	}
	return ""
}

func (m *SubOrder) GetChannelResp() string {
	if m != nil {
		return m.ChannelResp
	}
	return ""
}

type OrderHistory struct {
	// 訂單編號
	TrackingNumber string `protobuf:"bytes,1,opt,name=TrackingNumber,proto3" json:"TrackingNumber,omitempty"`
	// 渠道名稱
	ChannelName string `protobuf:"bytes,2,opt,name=ChannelName,proto3" json:"ChannelName,omitempty"`
	// 建立結果 e.g 成功 / 失敗
	IsSuccess bool `protobuf:"varint,3,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
	// 錯誤訊息
	ResponseMessage      string   `protobuf:"bytes,4,opt,name=ResponseMessage,proto3" json:"ResponseMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderHistory) Reset()         { *m = OrderHistory{} }
func (m *OrderHistory) String() string { return proto.CompactTextString(m) }
func (*OrderHistory) ProtoMessage()    {}
func (*OrderHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa47a2077d8980ed, []int{2}
}

func (m *OrderHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderHistory.Unmarshal(m, b)
}
func (m *OrderHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderHistory.Marshal(b, m, deterministic)
}
func (m *OrderHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderHistory.Merge(m, src)
}
func (m *OrderHistory) XXX_Size() int {
	return xxx_messageInfo_OrderHistory.Size(m)
}
func (m *OrderHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderHistory.DiscardUnknown(m)
}

var xxx_messageInfo_OrderHistory proto.InternalMessageInfo

func (m *OrderHistory) GetTrackingNumber() string {
	if m != nil {
		return m.TrackingNumber
	}
	return ""
}

func (m *OrderHistory) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *OrderHistory) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *OrderHistory) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

type TrackingNumber struct {
	TrackingNumber       string   `protobuf:"bytes,1,opt,name=TrackingNumber,proto3" json:"TrackingNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackingNumber) Reset()         { *m = TrackingNumber{} }
func (m *TrackingNumber) String() string { return proto.CompactTextString(m) }
func (*TrackingNumber) ProtoMessage()    {}
func (*TrackingNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa47a2077d8980ed, []int{3}
}

func (m *TrackingNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackingNumber.Unmarshal(m, b)
}
func (m *TrackingNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackingNumber.Marshal(b, m, deterministic)
}
func (m *TrackingNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingNumber.Merge(m, src)
}
func (m *TrackingNumber) XXX_Size() int {
	return xxx_messageInfo_TrackingNumber.Size(m)
}
func (m *TrackingNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingNumber.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingNumber proto.InternalMessageInfo

func (m *TrackingNumber) GetTrackingNumber() string {
	if m != nil {
		return m.TrackingNumber
	}
	return ""
}

type SubTrackingNumber struct {
	SubTrackingNumber    string   `protobuf:"bytes,1,opt,name=SubTrackingNumber,proto3" json:"SubTrackingNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubTrackingNumber) Reset()         { *m = SubTrackingNumber{} }
func (m *SubTrackingNumber) String() string { return proto.CompactTextString(m) }
func (*SubTrackingNumber) ProtoMessage()    {}
func (*SubTrackingNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa47a2077d8980ed, []int{4}
}

func (m *SubTrackingNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubTrackingNumber.Unmarshal(m, b)
}
func (m *SubTrackingNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubTrackingNumber.Marshal(b, m, deterministic)
}
func (m *SubTrackingNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubTrackingNumber.Merge(m, src)
}
func (m *SubTrackingNumber) XXX_Size() int {
	return xxx_messageInfo_SubTrackingNumber.Size(m)
}
func (m *SubTrackingNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_SubTrackingNumber.DiscardUnknown(m)
}

var xxx_messageInfo_SubTrackingNumber proto.InternalMessageInfo

func (m *SubTrackingNumber) GetSubTrackingNumber() string {
	if m != nil {
		return m.SubTrackingNumber
	}
	return ""
}

func init() {
	proto.RegisterEnum("order.WalletStatus", WalletStatus_name, WalletStatus_value)
	proto.RegisterEnum("order.TransactionType", TransactionType_name, TransactionType_value)
	proto.RegisterEnum("order.PaymentType", PaymentType_name, PaymentType_value)
	proto.RegisterEnum("order.Status", Status_name, Status_value)
	proto.RegisterEnum("order.MerchantRateType", MerchantRateType_name, MerchantRateType_value)
	proto.RegisterEnum("order.MerchantResult", MerchantResult_name, MerchantResult_value)
	proto.RegisterType((*MainOrder)(nil), "order.MainOrder")
	proto.RegisterType((*SubOrder)(nil), "order.SubOrder")
	proto.RegisterType((*OrderHistory)(nil), "order.OrderHistory")
	proto.RegisterType((*TrackingNumber)(nil), "order.TrackingNumber")
	proto.RegisterType((*SubTrackingNumber)(nil), "order.SubTrackingNumber")
}

func init() {
	proto.RegisterFile("order/order.proto", fileDescriptor_fa47a2077d8980ed)
}

var fileDescriptor_fa47a2077d8980ed = []byte{
	// 1216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xe1, 0x72, 0xda, 0x46,
	0x10, 0x46, 0x60, 0x6c, 0xbc, 0x06, 0x2c, 0x2e, 0x31, 0xb9, 0xd0, 0xd4, 0xa5, 0x34, 0x49, 0x29,
	0x93, 0x71, 0x3b, 0x6e, 0xa6, 0xe9, 0x4c, 0xdb, 0x99, 0x08, 0x81, 0x1b, 0x6a, 0x1b, 0x53, 0x49,
	0x8c, 0xc7, 0xbf, 0x3c, 0x32, 0x9c, 0x63, 0xd5, 0x20, 0x51, 0x49, 0xd4, 0xe1, 0x6d, 0xfa, 0x0a,
	0x7d, 0xa5, 0xce, 0xf4, 0x3d, 0x3a, 0xb7, 0x92, 0xe0, 0x24, 0xe1, 0xa9, 0xd3, 0x3f, 0x1e, 0xf6,
	0xfb, 0x76, 0xf7, 0xdb, 0xdb, 0xbd, 0xd3, 0x9d, 0xa1, 0xe2, 0xb8, 0x63, 0xe6, 0x7e, 0x8d, 0x7f,
	0x0f, 0x66, 0xae, 0xe3, 0x3b, 0x24, 0x8f, 0x46, 0xe3, 0xaf, 0x12, 0x6c, 0x9f, 0x9a, 0x96, 0x7d,
	0xc6, 0x2d, 0xf2, 0x12, 0xca, 0x86, 0x6b, 0x8e, 0x6e, 0x2d, 0xfb, 0x7d, 0x7f, 0x3e, 0xbd, 0x62,
	0x2e, 0x95, 0xea, 0x52, 0x73, 0x5b, 0x4b, 0xa0, 0xe4, 0x0d, 0x14, 0xcf, 0xcd, 0xc9, 0x84, 0xf9,
	0xba, 0x6f, 0xfa, 0x73, 0x8f, 0x66, 0xeb, 0x52, 0xb3, 0x7c, 0xf8, 0xe8, 0x20, 0x10, 0x10, 0x29,
	0x2d, 0xe6, 0x48, 0xde, 0xc2, 0xae, 0xe1, 0x9a, 0xb6, 0x67, 0x8e, 0x7c, 0xcb, 0xb1, 0x8d, 0xc5,
	0x8c, 0xd1, 0x1c, 0xc6, 0x56, 0xc3, 0xd8, 0x04, 0xab, 0x25, 0xdd, 0xc9, 0x73, 0x28, 0x0d, 0xcc,
	0xc5, 0x94, 0xd9, 0x7e, 0x58, 0xe1, 0x06, 0x56, 0x18, 0x07, 0xc9, 0x6b, 0xd8, 0x09, 0x01, 0xd4,
	0xc8, 0xa3, 0x06, 0x09, 0x35, 0x04, 0x46, 0x13, 0xdd, 0xf8, 0xf2, 0x3b, 0x6c, 0xe6, 0x78, 0x96,
	0xaf, 0x8c, 0x46, 0xce, 0xdc, 0xf6, 0xe9, 0x66, 0xb0, 0xfc, 0x38, 0x4a, 0x9a, 0xb0, 0x7b, 0x6e,
	0xf9, 0x37, 0x63, 0xd7, 0xbc, 0x8b, 0x1c, 0xb7, 0xd0, 0x31, 0x09, 0x93, 0x17, 0xb0, 0x19, 0xb6,
	0xa8, 0x80, 0x25, 0x94, 0xc2, 0x12, 0xc2, 0xe6, 0x84, 0x24, 0xa9, 0x41, 0x61, 0x30, 0x31, 0x17,
	0xcc, 0xed, 0x75, 0xe8, 0x36, 0x66, 0x5a, 0xda, 0x9c, 0x1b, 0x7a, 0xcc, 0xed, 0x9b, 0x53, 0x46,
	0x21, 0xe0, 0x22, 0x9b, 0x73, 0x1d, 0xf6, 0x87, 0x35, 0x62, 0xbd, 0x0e, 0xdd, 0x09, 0xb8, 0xc8,
	0x16, 0xb8, 0x01, 0x2d, 0xc6, 0xb8, 0x01, 0xd9, 0x07, 0x08, 0x7e, 0x63, 0x77, 0x4a, 0xc8, 0x0a,
	0x08, 0x79, 0x06, 0xdb, 0x06, 0x9b, 0xb0, 0xd9, 0x8d, 0x63, 0x33, 0x5a, 0x46, 0x7a, 0x05, 0xf0,
	0x11, 0x74, 0x3d, 0xdf, 0x9a, 0x9a, 0x3e, 0x1b, 0xab, 0x8e, 0xe7, 0xd3, 0xdd, 0xba, 0xd4, 0x94,
	0xb4, 0x38, 0xc8, 0x35, 0x94, 0x91, 0x3f, 0x37, 0x27, 0xe8, 0x22, 0xa3, 0x8b, 0x80, 0x90, 0x3a,
	0xec, 0xa8, 0xce, 0x74, 0x36, 0x61, 0x3e, 0x1b, 0x2b, 0x3e, 0xad, 0xd4, 0xa5, 0xe6, 0x86, 0x26,
	0x42, 0xbc, 0x8a, 0x0e, 0x8b, 0x78, 0x82, 0xfc, 0x0a, 0xe0, 0x6c, 0xf7, 0xc3, 0xcc, 0x72, 0x91,
	0x7d, 0x14, 0xb0, 0x4b, 0x80, 0xab, 0x9f, 0x32, 0x77, 0x74, 0x63, 0xda, 0x7e, 0xaf, 0x43, 0x1f,
	0x23, 0x2d, 0x20, 0xa4, 0x01, 0xc5, 0xc8, 0xc2, 0xce, 0xee, 0xe1, 0x22, 0x63, 0x18, 0xf9, 0x06,
	0x1e, 0x45, 0x36, 0x1e, 0x8f, 0x70, 0xc3, 0x55, 0xd1, 0x75, 0x1d, 0xc5, 0xd7, 0x14, 0xc1, 0x47,
	0x8c, 0xd1, 0x27, 0xb8, 0x68, 0x11, 0x22, 0x2a, 0xc8, 0x91, 0xa9, 0x99, 0x7e, 0xd0, 0x7f, 0x8a,
	0x5b, 0xe3, 0x49, 0xb8, 0x35, 0x92, 0xb4, 0x96, 0x0a, 0x10, 0x8b, 0xe7, 0x18, 0x7d, 0x8a, 0x3a,
	0x31, 0x8c, 0xbc, 0x82, 0x8a, 0x68, 0x1f, 0x59, 0x1f, 0xd8, 0x98, 0xd6, 0xd0, 0x31, 0x4d, 0x90,
	0x9f, 0xa0, 0xbc, 0x04, 0x99, 0x37, 0x9f, 0xf8, 0xf4, 0x13, 0x2c, 0x6a, 0x2f, 0x59, 0x14, 0x92,
	0x5a, 0xc2, 0x59, 0x14, 0xeb, 0x3b, 0xbe, 0x75, 0xbd, 0x18, 0x6a, 0x27, 0xf4, 0x19, 0xf6, 0x29,
	0x4d, 0x88, 0xde, 0x03, 0xd7, 0xf9, 0x8d, 0x8d, 0xf8, 0x88, 0x3e, 0xc5, 0x11, 0xa5, 0x09, 0x71,
	0x0a, 0x21, 0x88, 0x03, 0xdb, 0x8f, 0x4f, 0x41, 0xa0, 0x12, 0xf9, 0xc7, 0x73, 0xcc, 0xff, 0x59,
	0x2a, 0x7f, 0x40, 0x24, 0xf2, 0x73, 0x10, 0xf3, 0xd7, 0x53, 0xf9, 0x23, 0x8a, 0x1c, 0xc2, 0xe3,
	0x04, 0xac, 0x0c, 0x7a, 0xbd, 0x0e, 0xfd, 0x1c, 0x25, 0xd6, 0x72, 0xe4, 0x3b, 0xa8, 0xa6, 0x71,
	0x14, 0x6a, 0xa0, 0xd0, 0x3d, 0x2c, 0xdf, 0xe5, 0xea, 0x8d, 0x69, 0xdb, 0x6c, 0xd2, 0xeb, 0xd0,
	0x2f, 0x82, 0x5d, 0xbe, 0x04, 0xf0, 0x0c, 0x05, 0x86, 0xea, 0x8c, 0x19, 0x7d, 0x8e, 0xa9, 0x44,
	0x48, 0xf0, 0x40, 0xb1, 0x17, 0x31, 0x0f, 0x54, 0xd8, 0x07, 0x08, 0x4d, 0x8d, 0xfd, 0x4e, 0x5f,
	0xd6, 0xa5, 0x66, 0x51, 0x13, 0x10, 0x72, 0x00, 0x24, 0xb4, 0xc4, 0x43, 0xf0, 0x25, 0x26, 0x5a,
	0xc3, 0xf0, 0xee, 0x87, 0xa8, 0x70, 0x00, 0x9b, 0xc1, 0x5e, 0x48, 0x11, 0xfc, 0x2b, 0xd5, 0x6e,
	0x6b, 0xcc, 0xf4, 0x1c, 0x9b, 0x7e, 0x85, 0xda, 0x4b, 0x9b, 0x54, 0x61, 0xb3, 0xdd, 0xd6, 0x6f,
	0xad, 0x19, 0x6d, 0x21, 0x13, 0x5a, 0x8d, 0xbf, 0xb3, 0x50, 0xd0, 0xe7, 0x57, 0x1f, 0x77, 0x65,
	0xbd, 0x82, 0x8a, 0x3e, 0xbf, 0x4a, 0xb8, 0x66, 0x83, 0xb2, 0x52, 0x44, 0xbc, 0xed, 0xb9, 0xe0,
	0x03, 0xb8, 0xae, 0xed, 0xd8, 0xd4, 0x8d, 0x74, 0x53, 0xef, 0x1f, 0x77, 0xfe, 0xbf, 0xc6, 0xdd,
	0xf3, 0xf4, 0xf9, 0x68, 0xc4, 0x3c, 0x0f, 0x2f, 0x9f, 0x82, 0xb6, 0x02, 0xf8, 0xbd, 0xa3, 0x31,
	0x6f, 0xe6, 0xd8, 0x1e, 0x3b, 0x65, 0x9e, 0x67, 0xbe, 0x67, 0xd1, 0xbd, 0x93, 0x80, 0x13, 0x43,
	0x2d, 0x04, 0x1f, 0x78, 0x61, 0xa8, 0xab, 0x15, 0xf0, 0xc8, 0xf0, 0xce, 0x11, 0xa1, 0xc6, 0x9f,
	0x12, 0x14, 0xb1, 0xc3, 0xef, 0x2c, 0xcf, 0x77, 0xdc, 0xc5, 0x83, 0x1b, 0x9d, 0x68, 0x4e, 0x36,
	0xdd, 0x9c, 0xd8, 0x22, 0x73, 0x0f, 0x58, 0xe4, 0xc6, 0xda, 0x45, 0x36, 0xbe, 0x4f, 0x56, 0xf4,
	0xd0, 0x1a, 0x1b, 0xca, 0x9a, 0xcd, 0xb0, 0x7e, 0x87, 0x48, 0xf7, 0xec, 0x90, 0xd6, 0x69, 0xfc,
	0x09, 0x44, 0x00, 0x36, 0xaf, 0xd8, 0xb5, 0xe3, 0x32, 0x39, 0x43, 0x76, 0x60, 0x6b, 0xe4, 0xd8,
	0xd7, 0x96, 0x3b, 0x95, 0x25, 0x4e, 0x5c, 0x9b, 0xd6, 0x84, 0x8d, 0xe5, 0x2c, 0xa1, 0xf0, 0x78,
	0x6e, 0xdf, 0xda, 0xce, 0xdd, 0xe5, 0x1d, 0xc6, 0x5e, 0x7a, 0x18, 0x2c, 0xe7, 0x5a, 0xbf, 0xa4,
	0x1e, 0x46, 0x3c, 0x4b, 0xf8, 0xee, 0x90, 0x33, 0xa4, 0x0c, 0x10, 0xbd, 0x2d, 0xcc, 0x89, 0x2c,
	0x91, 0x1a, 0x54, 0x87, 0xfd, 0xe3, 0xfe, 0xd9, 0xf9, 0xa5, 0xa1, 0x29, 0x7d, 0x5d, 0x51, 0x8d,
	0xde, 0x59, 0xdf, 0xb8, 0x18, 0x74, 0xe5, 0x6c, 0xeb, 0x38, 0xf6, 0xf8, 0xe1, 0x05, 0x28, 0x27,
	0xbd, 0x81, 0x72, 0x21, 0x67, 0xf8, 0xef, 0xf3, 0xae, 0xfa, 0x4e, 0x31, 0x64, 0x89, 0x14, 0xa1,
	0xd0, 0x56, 0xfa, 0xc7, 0xaa, 0xa2, 0x75, 0xe4, 0x2c, 0xa9, 0x02, 0x09, 0x13, 0x0e, 0x94, 0x8b,
	0xd3, 0x6e, 0xdf, 0xc0, 0x64, 0xb9, 0xd6, 0x45, 0xf4, 0x82, 0x21, 0x5b, 0x90, 0x33, 0xda, 0x6a,
	0x50, 0xcb, 0x40, 0x3b, 0x53, 0xbb, 0xba, 0xde, 0xeb, 0xff, 0x1c, 0xac, 0x70, 0xa0, 0x0c, 0xf5,
	0x2e, 0x4f, 0xb3, 0x03, 0x5b, 0xfa, 0x50, 0x55, 0xbb, 0xdd, 0x8e, 0x9c, 0xe3, 0xc4, 0x91, 0xd2,
	0x3b, 0xe9, 0x76, 0xe4, 0x0d, 0x52, 0x81, 0x52, 0x98, 0x5f, 0x37, 0x14, 0x63, 0xa8, 0xcb, 0xf9,
	0xd6, 0x51, 0xfa, 0x2e, 0x24, 0xdb, 0x90, 0x77, 0x4d, 0xdf, 0x72, 0xe4, 0x0c, 0xff, 0x79, 0xcd,
	0x2f, 0x27, 0x59, 0x22, 0xcf, 0x80, 0x86, 0x7d, 0x9b, 0x86, 0x01, 0x97, 0x6e, 0x18, 0x21, 0x67,
	0x5b, 0x97, 0xc9, 0xcb, 0x8b, 0x3c, 0x85, 0xbd, 0x38, 0x82, 0x9b, 0x8b, 0x8d, 0xe5, 0x0c, 0x1f,
	0x41, 0x9c, 0x3a, 0x0a, 0x86, 0x23, 0x71, 0x66, 0x88, 0x22, 0x71, 0x5e, 0xce, 0x1e, 0xfe, 0x93,
	0x83, 0x7c, 0xf0, 0xb5, 0x79, 0x03, 0xbb, 0xaa, 0xcb, 0x4c, 0x9f, 0xad, 0xde, 0xcc, 0x72, 0x74,
	0x45, 0x46, 0x48, 0x2d, 0x85, 0x34, 0x32, 0xe4, 0x35, 0x94, 0x83, 0xc0, 0xe5, 0x87, 0x6b, 0x37,
	0x7a, 0x0a, 0x86, 0x40, 0x2d, 0x09, 0x34, 0x32, 0xe4, 0x2d, 0x90, 0x20, 0x2a, 0x76, 0x12, 0xa3,
	0x77, 0xb6, 0x08, 0xd6, 0xd6, 0x81, 0x8d, 0x0c, 0x2f, 0x78, 0x38, 0x1b, 0xff, 0xbf, 0x82, 0x83,
	0xc0, 0x8f, 0x2a, 0xf8, 0x07, 0x28, 0xff, 0x3a, 0x67, 0xee, 0x62, 0xa5, 0xb6, 0xb7, 0x7a, 0xd8,
	0x0b, 0xc7, 0x67, 0xad, 0xe4, 0x8f, 0x50, 0xc2, 0xe0, 0xa5, 0x22, 0x5d, 0x09, 0x24, 0xc2, 0xd7,
	0x48, 0x2b, 0x50, 0xc1, 0xe8, 0x58, 0xab, 0xee, 0x51, 0x5f, 0xdf, 0xac, 0xab, 0x4d, 0xfc, 0xd7,
	0xe8, 0xdb, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x4a, 0xf6, 0xb6, 0x2f, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderClient interface {
	// 建立主單
	CreateMainOrder(ctx context.Context, in *MainOrder, opts ...grpc.CallOption) (*MainOrder, error)
	// 建立子單
	CreateSubOrder(ctx context.Context, in *SubOrder, opts ...grpc.CallOption) (*SubOrder, error)
	// 建立歷史訂單
	CreateOrderHistory(ctx context.Context, in *OrderHistory, opts ...grpc.CallOption) (*OrderHistory, error)
	// 更新主單
	UpdateMainOrder(ctx context.Context, in *MainOrder, opts ...grpc.CallOption) (*MainOrder, error)
	// 更新子單
	UpdateSubOrder(ctx context.Context, in *SubOrder, opts ...grpc.CallOption) (*SubOrder, error)
	// 查詢主單
	QueryMainOrder(ctx context.Context, in *TrackingNumber, opts ...grpc.CallOption) (*MainOrder, error)
	// 查詢子單
	QuerySubOrder(ctx context.Context, in *SubTrackingNumber, opts ...grpc.CallOption) (*SubOrder, error)
	// 查詢歷史訂單
	QueryOrderHistory(ctx context.Context, in *TrackingNumber, opts ...grpc.CallOption) (*OrderHistory, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) CreateMainOrder(ctx context.Context, in *MainOrder, opts ...grpc.CallOption) (*MainOrder, error) {
	out := new(MainOrder)
	err := c.cc.Invoke(ctx, "/order.Order/CreateMainOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) CreateSubOrder(ctx context.Context, in *SubOrder, opts ...grpc.CallOption) (*SubOrder, error) {
	out := new(SubOrder)
	err := c.cc.Invoke(ctx, "/order.Order/CreateSubOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) CreateOrderHistory(ctx context.Context, in *OrderHistory, opts ...grpc.CallOption) (*OrderHistory, error) {
	out := new(OrderHistory)
	err := c.cc.Invoke(ctx, "/order.Order/CreateOrderHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) UpdateMainOrder(ctx context.Context, in *MainOrder, opts ...grpc.CallOption) (*MainOrder, error) {
	out := new(MainOrder)
	err := c.cc.Invoke(ctx, "/order.Order/UpdateMainOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) UpdateSubOrder(ctx context.Context, in *SubOrder, opts ...grpc.CallOption) (*SubOrder, error) {
	out := new(SubOrder)
	err := c.cc.Invoke(ctx, "/order.Order/UpdateSubOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) QueryMainOrder(ctx context.Context, in *TrackingNumber, opts ...grpc.CallOption) (*MainOrder, error) {
	out := new(MainOrder)
	err := c.cc.Invoke(ctx, "/order.Order/QueryMainOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) QuerySubOrder(ctx context.Context, in *SubTrackingNumber, opts ...grpc.CallOption) (*SubOrder, error) {
	out := new(SubOrder)
	err := c.cc.Invoke(ctx, "/order.Order/QuerySubOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) QueryOrderHistory(ctx context.Context, in *TrackingNumber, opts ...grpc.CallOption) (*OrderHistory, error) {
	out := new(OrderHistory)
	err := c.cc.Invoke(ctx, "/order.Order/QueryOrderHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
type OrderServer interface {
	// 建立主單
	CreateMainOrder(context.Context, *MainOrder) (*MainOrder, error)
	// 建立子單
	CreateSubOrder(context.Context, *SubOrder) (*SubOrder, error)
	// 建立歷史訂單
	CreateOrderHistory(context.Context, *OrderHistory) (*OrderHistory, error)
	// 更新主單
	UpdateMainOrder(context.Context, *MainOrder) (*MainOrder, error)
	// 更新子單
	UpdateSubOrder(context.Context, *SubOrder) (*SubOrder, error)
	// 查詢主單
	QueryMainOrder(context.Context, *TrackingNumber) (*MainOrder, error)
	// 查詢子單
	QuerySubOrder(context.Context, *SubTrackingNumber) (*SubOrder, error)
	// 查詢歷史訂單
	QueryOrderHistory(context.Context, *TrackingNumber) (*OrderHistory, error)
}

// UnimplementedOrderServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (*UnimplementedOrderServer) CreateMainOrder(ctx context.Context, req *MainOrder) (*MainOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMainOrder not implemented")
}
func (*UnimplementedOrderServer) CreateSubOrder(ctx context.Context, req *SubOrder) (*SubOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubOrder not implemented")
}
func (*UnimplementedOrderServer) CreateOrderHistory(ctx context.Context, req *OrderHistory) (*OrderHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderHistory not implemented")
}
func (*UnimplementedOrderServer) UpdateMainOrder(ctx context.Context, req *MainOrder) (*MainOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMainOrder not implemented")
}
func (*UnimplementedOrderServer) UpdateSubOrder(ctx context.Context, req *SubOrder) (*SubOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubOrder not implemented")
}
func (*UnimplementedOrderServer) QueryMainOrder(ctx context.Context, req *TrackingNumber) (*MainOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMainOrder not implemented")
}
func (*UnimplementedOrderServer) QuerySubOrder(ctx context.Context, req *SubTrackingNumber) (*SubOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySubOrder not implemented")
}
func (*UnimplementedOrderServer) QueryOrderHistory(ctx context.Context, req *TrackingNumber) (*OrderHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderHistory not implemented")
}

func RegisterOrderServer(s *grpc.Server, srv OrderServer) {
	s.RegisterService(&_Order_serviceDesc, srv)
}

func _Order_CreateMainOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateMainOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/CreateMainOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateMainOrder(ctx, req.(*MainOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_CreateSubOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateSubOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/CreateSubOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateSubOrder(ctx, req.(*SubOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_CreateOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/CreateOrderHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateOrderHistory(ctx, req.(*OrderHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_UpdateMainOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).UpdateMainOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/UpdateMainOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UpdateMainOrder(ctx, req.(*MainOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_UpdateSubOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).UpdateSubOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/UpdateSubOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UpdateSubOrder(ctx, req.(*SubOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_QueryMainOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackingNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).QueryMainOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/QueryMainOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).QueryMainOrder(ctx, req.(*TrackingNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_QuerySubOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubTrackingNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).QuerySubOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/QuerySubOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).QuerySubOrder(ctx, req.(*SubTrackingNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_QueryOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackingNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).QueryOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/QueryOrderHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).QueryOrderHistory(ctx, req.(*TrackingNumber))
	}
	return interceptor(ctx, in, info, handler)
}

var _Order_serviceDesc = grpc.ServiceDesc{
	ServiceName: "order.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMainOrder",
			Handler:    _Order_CreateMainOrder_Handler,
		},
		{
			MethodName: "CreateSubOrder",
			Handler:    _Order_CreateSubOrder_Handler,
		},
		{
			MethodName: "CreateOrderHistory",
			Handler:    _Order_CreateOrderHistory_Handler,
		},
		{
			MethodName: "UpdateMainOrder",
			Handler:    _Order_UpdateMainOrder_Handler,
		},
		{
			MethodName: "UpdateSubOrder",
			Handler:    _Order_UpdateSubOrder_Handler,
		},
		{
			MethodName: "QueryMainOrder",
			Handler:    _Order_QueryMainOrder_Handler,
		},
		{
			MethodName: "QuerySubOrder",
			Handler:    _Order_QuerySubOrder_Handler,
		},
		{
			MethodName: "QueryOrderHistory",
			Handler:    _Order_QueryOrderHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}
